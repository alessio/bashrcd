#!/bin/bash

# Copyright (C) 2015 Smartodds Ltd
# COpyright (C) 2015, 2016 Alessio Treglia <quadrispro@ubuntu.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# Global const vars

BASHRCD_DIR="${BASHRCD_DIR:-${HOME}/.bashrc.d}"
BASHRCD_VERSION='0.1.1'

# Global vars

g_bashrcd_local_symbols=''


f_bashrcd_register_local_symbol() {
  g_bashrcd_local_symbols="${g_bashrcd_local_symbols} $1"
}
f_bashrcd_register_local_symbol f_bashrcd_register_local_symbol


f_bashrcd_abort() {
  local l_rc l_err

  l_rc="$1"
  l_err="$2"

  [[ -z "${l_err}" ]] || printf "%s" "${l_err}\n" >&2

  exit "${l_rc}"
}
f_bashrcd_register_local_symbol f_bashrcd_abort


f_bashrcd_init_userdir() {
  [[ -d "${BASHRCD_DIR}" ]] || mkdir -p "${BASHRCD_DIR}"
}
f_bashrcd_register_local_symbol f_bashrcd_init_userdir


f_bashrcd_process_scripts() {
  local \
    l_script \
    l_list

  # shellcheck disable=SC2124
  l_list="$@"
  for l_script in ${l_list} ; do
    # shellcheck disable=SC1090
    . "${l_script}"
  done
}
f_bashrcd_register_local_symbol f_bashrcd_process_scripts


f_bashrcd_check_run_parts() {
  local \
    l_cmd_busybox \
    l_cmd_run_parts \
    l_rc

  l_cmd_run_parts="$(which run-parts 2>/dev/null)"
  l_rc="$?"
  [ "${l_rc}" -eq 0 ] && printf "%s" "${l_cmd_run_parts}" && return 0

  l_cmd_run_parts=''
  l_cmd_busybox="$(which busybox 2>/dev/null)"
  l_rc="$?"
  if [ "${l_rc}" -eq 0 ]; then
    ${l_cmd_busybox} --list | grep -q run-parts 2>/dev/null
    l_rc="$?"
    [ "${l_rc}" -eq 0 ] && printf "%s" "${l_cmd_busybox} run-parts" && return 0
  fi

  # Try the go runparts
  l_cmd_run_parts="$(which runparts 2>/dev/null)"
  l_rc="$?"
  [ "${l_rc}" -eq 0 ] && printf "%s" "${l_cmd_run_parts}" && return 0

  f_bashrcd_abort 2 "Unable to locate run-parts"
}
f_bashrcd_register_local_symbol f_bashrcd_check_run_parts


f_bashrcd_list_scripts() {
  local l_cmd_run_parts

  l_cmd_run_parts="$(f_bashrcd_check_run_parts)"
  ${l_cmd_run_parts} --list "${BASHRCD_DIR}"
}
f_bashrcd_register_local_symbol f_bashrcd_list_scripts


# shellcheck disable=SC2086
f_bashrcd_help() {
  cat >&2 <<EOF
Usage: $(basename $0) [-dhnv]
Execute scripts found in \$BASHRCD_DIR in the current shell.

  Options:
   -d        Override BASHRCD_DIR
   -h        Display this help and exit
   -n        List the scripts as they would be executed,
             without actually executing them.
   -v        Output version information and exit.

If \$BASHRCD_DIR is null or unset, its default value is
\`\$HOME/.bashrc.d/'.
EOF
}
f_bashrcd_register_local_symbol f_bashrcd_help


# shellcheck disable=SC2086
f_bashrcd_version() {
  cat >&2 <<EOF
$(basename $0) ${BASHRCD_VERSION}
Copyright (C) 2015 Smartodds Ltd
License GPLv2+: GNU GPL version 2 or later <http://gnu.org/licenses/gpl.html>.
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.

Written by Alessio Treglia.
EOF
}
f_bashrcd_register_local_symbol f_bashrcd_version


# shellcheck disable=SC2086
f_bashrcd_fatal_invalid_option() {
  cat >&2 <<EOF
$(basename $0): unrecognised option -- '$1'
Try '$(basename $0) -h' for more information.
EOF
}
f_bashrcd_register_local_symbol f_bashrcd_fatal_invalid_option


# shellcheck disable=SC2086
f_bashrcd_fatal_arg_not_found() {
  cat >&2 <<EOF
$(basename $0): option requires an argument -- '$1'
Try '$(basename $0) -h' for more information.
EOF
}
f_bashrcd_register_local_symbol f_bashrcd_fatal_arg_not_found


# main()

f_bashrcd_init_userdir

# shellcheck disable=SC1001
while getopts ":d:hnv" opt; do
  case "${opt}" in
    d)  BASHRCD_DIR="${OPTARG}" ;;
    h)  f_bashrcd_help ; exit 0 ;;
    n)  f_bashrcd_list_scripts ; exit 0 ;;
    v)  f_bashrcd_version ; exit 0 ;;
    \:) f_bashrcd_fatal_arg_not_found "${OPTARG}" ; f_bashrcd_abort 1 ;;
    \?) f_bashrcd_fatal_invalid_option "${OPTARG}" ; f_bashrcd_abort 1 ;;
  esac
done

shift "$((OPTIND-1))"

# shellcheck disable=SC2046
f_bashrcd_process_scripts $(f_bashrcd_list_scripts)


# shellcheck disable=SC2086
unset ${g_bashrcd_local_symbols}
unset g_bashrcd_local_symbols
